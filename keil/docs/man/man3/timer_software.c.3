.TH "code/utils/timer_software.c" 3 "Fri Nov 4 2022" "Lab TD" \" -*- nroff -*-
.ad l
.nh
.SH NAME
code/utils/timer_software.c \- 
.PP
Timer software library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include 'timer_software\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVALIDATE_TIMER\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl |= 1)"
.br
.ti -1c
.RI "#define \fBINVALIDATE_TIMER\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl &= ~1)"
.br
.ti -1c
.RI "#define \fBTIMER_IS_VALID\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerControl & 1) ? 1 : 0)"
.br
.ti -1c
.RI "#define \fBTIMER_ENABLE\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl |= 2)"
.br
.ti -1c
.RI "#define \fBTIMER_DISABLE\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl &= ~2)"
.br
.ti -1c
.RI "#define \fBTIMER_IS_ENABLED\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerControl & 2) ? 1 : 0)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_MODE_0\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl &= ~0x0C)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_MODE_1\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl = ((\fBtimers\fP[timer_id]\&.TimerControl & (~(1 << 3))) | (1 << 2)))"
.br
.ti -1c
.RI "#define \fBTIMER_SET_MODE_2\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl = ((\fBtimers\fP[timer_id]\&.TimerControl & (~(1 << 2))) | (1 << 3)))"
.br
.ti -1c
.RI "#define \fBTIMER_SET_MODE_3\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerControl |= ((1 << 2) | (1 << 3)))"
.br
.ti -1c
.RI "#define \fBTIMER_GET_MODE\fP(timer_id)   ((\fBtimers\fP[timer_id]\&.TimerControl >> 2) & 0x03)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_PERIOD\fP(timer_id, period)   (\fBtimers\fP[ timer_id ]\&.TimerPeriod = period)"
.br
.ti -1c
.RI "#define \fBTIMER_GET_PERIOD\fP(timer_id)   (\fBtimers\fP[ timer_id ]\&.TimerPeriod)"
.br
.ti -1c
.RI "#define \fBTIMER_GET_COUNTER\fP(timer_id)   (\fBtimers\fP[ timer_id ]\&.TimerCounter)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_COUNTER\fP(timer_id, counter)   (\fBtimers\fP[ timer_id ]\&.TimerCounter = counter)"
.br
.ti -1c
.RI "#define \fBTIMER_RESET\fP(timer_id)   (\fBtimers\fP[ timer_id ]\&.TimerCounter = 0)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_RUNNING_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus |= 1)"
.br
.ti -1c
.RI "#define \fBTIMER_CLR_RUNNING_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus &= ~1)"
.br
.ti -1c
.RI "#define \fBTIMER_IS_RUNNING\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerStatus & 1) ? 1 : 0)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_ERROR_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus |= (1 << 1))"
.br
.ti -1c
.RI "#define \fBTIMER_CLR_ERROR_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus &= ~(1 << 1))"
.br
.ti -1c
.RI "#define \fBTIMER_IS_IN_ERROR_STATE\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerStatus & (1 << 1)) ? 1 : 0)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_INTERRUPT_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus |= (1 << 2))"
.br
.ti -1c
.RI "#define \fBTIMER_CLR_INTERRUPT_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus &= ~(1 << 2))"
.br
.ti -1c
.RI "#define \fBTIMER_INTERRUPT_PENDING\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerStatus & (1 << 2)) ? 1 : 0)"
.br
.ti -1c
.RI "#define \fBTIMER_SET_OVERFLOW_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus |= (1 << 3))"
.br
.ti -1c
.RI "#define \fBTIMER_CLR_OVERFLOW_FLAG\fP(timer_id)   (\fBtimers\fP[timer_id]\&.TimerStatus &= ~(1 << 3))"
.br
.ti -1c
.RI "#define \fBTIMER_IS_OVERFLOW\fP(timer_id)   ( (\fBtimers\fP[timer_id]\&.TimerStatus & (1 << 3)) ? 1 : 0)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBTIMER_SOFTWARE_ModX\fP ()"
.br
.ti -1c
.RI "void \fBTIMER_SOFTWARE_init\fP ()"
.br
.ti -1c
.RI "uint8_t \fBTIMER_SOFTWARE_release_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "\fBtimer_software_handler_t\fP \fBTIMER_SOFTWARE_request_timer\fP ()"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_configure_timer\fP (\fBtimer_software_handler_t\fP timer_handler, \fBSOFTWARE_TIMER_MODE\fP timer_mode, uint32_t period, uint8_t enable)"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_enable_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_disable_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_start_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_stop_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "int8_t \fBTIMER_SOFTWARE_set_callback\fP (\fBtimer_software_handler_t\fP timer_handler, \fBTIMER_SOFTWARE_Callback\fP callback)"
.br
.ti -1c
.RI "void \fBTIMER_SOFTWARE_Wait\fP (uint32_t time)"
.br
.ti -1c
.RI "void \fBTIMER_SOFTWARE_reset_timer\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "uint8_t \fBTIMER_SOFTWARE_interrupt_pending\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.ti -1c
.RI "void \fBTIMER_SOFTWARE_clear_interrupt\fP (\fBtimer_software_handler_t\fP timer_handler)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "volatile \fBSOFTWARE_TIMER\fP \fBtimers\fP [\fBMAX_NR_TIMERS\fP]"
.br
.RI "\fIThe software timers structures\&. \fP"
.ti -1c
.RI "\fBtimer_software_handler_t\fP \fBwait_timer\fP"
.br
.RI "\fIDefines a software timer needed for a the function\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Timer software library\&. 

\fBAuthor:\fP
.RS 4
Valentin STANGACIU, DSPLabs
.RE
.PP
Contains a library that implements a software timer module 
.PP
Definition in file \fBtimer_software\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Lab TD from the source code\&.
