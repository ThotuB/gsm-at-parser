<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Nov 18 14:41:51 2022
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; ExecuteCommand &rArr; GetCommandResponse &rArr; parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d0]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">BOD_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">BOD_IRQHandler</a><BR>
 <LI><a href="#[5a]">_ttywrch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[57]">DRV_UART_SendByte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from drv_touchscreen.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[36]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">GPIO_IRQHandler</a> from drv_touchscreen.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[33]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from timer_software_init.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from drv_touchscreen.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6d]">TouchScreenCallBack</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[13]">UART0_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">UART4_IRQHandler</a> from drv_uart.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3c]">__main</a> from __main.o(!!!main) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[3a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3b]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[39]">fputc</a> from retarget.o(.text) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[de]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[df]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e0]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e1]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[40]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[42]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[43]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[45]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e3]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[4d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[e4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[47]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[e6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[e9]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[49]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[ea]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[eb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[52]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[f9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[fa]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[fb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[fc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[fd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[fe]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[100]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[101]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; ExecuteCommand &rArr; GetCommandResponse &rArr; parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[102]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d1]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[51]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[103]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[53]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[55]"></a>initRetargetDebugSystem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = initRetargetDebugSystem &rArr; DRV_UART_Configure &rArr; DRV_UART_SetTimeout &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[39]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = fputc &rArr; DRV_UART_SendByte &rArr; DRV_UART_PrivateSendByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>fgetc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
</UL>

<P><STRONG><a name="[c8]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[5a]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
</UL>

<P><STRONG><a name="[54]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer_software_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER0_IRQHandler &rArr; TIMER_SOFTWARE_ModX
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_ModX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIMER_SOFTWARE_init_system</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, timer_software_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_SOFTWARE_init_system &rArr; TIMER_SOFTWARE_init &rArr; TIMER_SOFTWARE_request_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[104]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[109]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10c]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>SendCommand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = SendCommand &rArr; DRV_UART_Write &rArr; DRV_UART_PrivateSendByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_FlushTX
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_FlushRX
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand
</UL>

<P><STRONG><a name="[63]"></a>GetCommandResponse</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = GetCommandResponse &rArr; parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_BytesAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand
</UL>

<P><STRONG><a name="[69]"></a>ExecuteCommand</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = ExecuteCommand &rArr; GetCommandResponse &rArr; parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>CommandResponseValid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandResponseValid
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>ExtractData</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[80]"></a>ConvertAsuToDbmw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>TouchScreenCallBack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = TouchScreenCallBack &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>BoardInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = BoardInit &rArr; initRetargetDebugSystem &rArr; DRV_UART_Configure &rArr; DRV_UART_SetTimeout &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRetargetDebugSystem
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init_system
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TOUCHSCREEN_SetTouchCallback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TOUCHSCREEN_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_PowerOn
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_ClrScr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>callback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_On
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Off
</UL>

<P><STRONG><a name="[7b]"></a>blinkInSqeuence</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_On
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Off
</UL>

<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = main &rArr; ExecuteCommand &rArr; GetCommandResponse &rArr; parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertAsuToDbmw
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandResponseValid
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecuteCommand
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 796 bytes, Stack size 0 bytes, system_lpc177x_8x.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, system_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>parser_error</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char_
</UL>

<P><STRONG><a name="[84]"></a>data_push_char</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_push_char
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char_
</UL>

<P><STRONG><a name="[85]"></a>data_push_line</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, parser.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char_
</UL>

<P><STRONG><a name="[82]"></a>parse_char_</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_push_line
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_push_char
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_error
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char
</UL>

<P><STRONG><a name="[66]"></a>parse_char</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = parse_char &rArr; parse_char_ &rArr; parser_error &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char_
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[86]"></a>print_data</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, parser.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7f]"></a>get_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = get_data &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>DRV_SDRAM_PERIOD</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, drv_sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DRV_SDRAM_PERIOD &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>

<P><STRONG><a name="[8b]"></a>DRV_SDRAM_P2C</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, drv_sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_SDRAM_P2C &rArr; DRV_SDRAM_PERIOD &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_PERIOD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_InitPins
</UL>

<P><STRONG><a name="[90]"></a>DRV_SDRAM_InitPins</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, drv_sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DRV_SDRAM_InitPins &rArr; DRV_SDRAM_P2C &rArr; DRV_SDRAM_PERIOD &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_Init
</UL>

<P><STRONG><a name="[70]"></a>DRV_SDRAM_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, drv_sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DRV_SDRAM_Init &rArr; DRV_SDRAM_InitPins &rArr; DRV_SDRAM_P2C &rArr; DRV_SDRAM_PERIOD &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_InitPins
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[71]"></a>DRV_LCD_Init</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, drv_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[73]"></a>DRV_LCD_PowerOn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_LCD_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[10e]"></a>DRV_LCD_PowerOff</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, drv_lcd.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>DRV_LCD_TestFillColor</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, drv_lcd.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>DRV_LCD_PutPixel</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DRV_LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DrawChar_Small
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DrawChar_Big
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_ClrScr
</UL>

<P><STRONG><a name="[72]"></a>DRV_LCD_ClrScr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_LCD_ClrScr &rArr; DRV_LCD_PutPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[92]"></a>DRV_LCD_DrawChar_Big</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DisplayChar
</UL>

<P><STRONG><a name="[93]"></a>DRV_LCD_DrawChar_Small</STRONG> (Thumb, 338 bytes, Stack size 56 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_PutPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DisplayCharSmall
</UL>

<P><STRONG><a name="[94]"></a>DRV_LCD_DisplayCharSmall</STRONG> (Thumb, 42 bytes, Stack size 36 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DrawChar_Small
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts_Small
</UL>

<P><STRONG><a name="[95]"></a>DRV_LCD_DisplayChar</STRONG> (Thumb, 46 bytes, Stack size 36 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DrawChar_Big
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts_Big
</UL>

<P><STRONG><a name="[96]"></a>DRV_LCD_Puts_Small</STRONG> (Thumb, 58 bytes, Stack size 44 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DisplayCharSmall
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts
</UL>

<P><STRONG><a name="[97]"></a>DRV_LCD_Puts_Big</STRONG> (Thumb, 58 bytes, Stack size 44 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_DisplayChar
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts
</UL>

<P><STRONG><a name="[98]"></a>DRV_LCD_Puts</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, drv_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts_Big
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LCD_Puts_Small
</UL>

<P><STRONG><a name="[99]"></a>DRV_UART_GeneralIRQHandler</STRONG> (Thumb, 698 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFull
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART0_IRQHandler &rArr; DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART2_IRQHandler &rArr; DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART3_IRQHandler &rArr; DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART4_IRQHandler &rArr; DRV_UART_GeneralIRQHandler &rArr; RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DRV_UART_SetTimeout</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DRV_UART_SetTimeout &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
</UL>

<P><STRONG><a name="[a1]"></a>DRV_UART_GetTimeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[56]"></a>DRV_UART_Configure</STRONG> (Thumb, 1194 bytes, Stack size 40 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = DRV_UART_Configure &rArr; DRV_UART_SetTimeout &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GENERAL_CalculateBaudrateDivMul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initRetargetDebugSystem
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>DRV_UART_SendCharBlocking</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendBufferBlocking
</UL>

<P><STRONG><a name="[a5]"></a>DRV_UART_SendBufferBlocking</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendCharBlocking
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[a6]"></a>DRV_UART_GetCharBlocking</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[a7]"></a>DRV_UART_PrivateSendByte</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DRV_UART_PrivateSendByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
</UL>

<P><STRONG><a name="[67]"></a>DRV_UART_BytesAvailable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = DRV_UART_BytesAvailable &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[59]"></a>DRV_UART_ReadByte</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = DRV_UART_ReadByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufEmpty
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[57]"></a>DRV_UART_SendByte</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = DRV_UART_SendByte &rArr; DRV_UART_PrivateSendByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFull
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_PrivateSendByte
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a9]"></a>DRV_UART_GetErrno</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[aa]"></a>DRV_UART_Read</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufRead
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_reset_timer
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[62]"></a>DRV_UART_Write</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DRV_UART_Write &rArr; DRV_UART_PrivateSendByte &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFree
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_PrivateSendByte
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_interrupt_pending
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_clear_interrupt
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[ad]"></a>DRV_UART_Process</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, drv_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
</UL>

<P><STRONG><a name="[110]"></a>DRV_UART_SetRxCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_uart.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>DRV_UART_SetTxCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_uart.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>DRV_UART_SetRxTriggerFunction</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_uart.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>DRV_UART_FlushRX</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_UART_FlushRX
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[60]"></a>DRV_UART_FlushTX</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_UART_FlushTX
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[b1]"></a>DRV_GENERAL_GetFirstDigit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_general.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GENERAL_CalculateBaudrateDLD
</UL>

<P><STRONG><a name="[af]"></a>DRV_GENERAL_CalculateBaudrateDLD</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, drv_general.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GENERAL_GetFirstDigit
</UL>

<P><STRONG><a name="[a2]"></a>DRV_GENERAL_CalculateBaudrateDivMul</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, drv_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DRV_GENERAL_CalculateBaudrateDivMul
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
</UL>

<P><STRONG><a name="[74]"></a>DRV_TOUCHSCREEN_Init</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, drv_touchscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_TOUCHSCREEN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, drv_touchscreen.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPIO_IRQHandler</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, drv_touchscreen.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 626 bytes, Stack size 8 bytes, drv_touchscreen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>TouchGet</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, drv_touchscreen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_TOUCHSCREEN_Process
</UL>

<P><STRONG><a name="[75]"></a>DRV_TOUCHSCREEN_SetTouchCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_touchscreen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[b2]"></a>DRV_TOUCHSCREEN_Process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, drv_touchscreen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchGet
</UL>

<P><STRONG><a name="[79]"></a>DRV_LED_Off</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Toggle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkInSqeuence
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback
</UL>

<P><STRONG><a name="[76]"></a>DRV_LED_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, drv_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DRV_LED_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[78]"></a>DRV_LED_On</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, drv_led.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Toggle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkInSqeuence
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback
</UL>

<P><STRONG><a name="[b4]"></a>DRV_LED_Toggle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, drv_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_On
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_LED_Off
</UL>

<P><STRONG><a name="[9a]"></a>RingBufFull</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RingBufFull
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
</UL>

<P><STRONG><a name="[9c]"></a>RingBufEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
</UL>

<P><STRONG><a name="[ae]"></a>RingBufFlush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_FlushTX
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_FlushRX
</UL>

<P><STRONG><a name="[a8]"></a>RingBufUsed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RingBufUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufAdvanceRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFree
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Process
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_BytesAvailable
</UL>

<P><STRONG><a name="[ac]"></a>RingBufFree</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufFree &rArr; RingBufUsed
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufAdvanceWrite
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
</UL>

<P><STRONG><a name="[113]"></a>RingBufContigUsed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ringbuf.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>RingBufContigFree</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ringbuf.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>RingBufSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ringbuf.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>RingBufReadOne</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufReadOne
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIndexAtomic
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufRead
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
</UL>

<P><STRONG><a name="[ab]"></a>RingBufRead</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
</UL>

<P><STRONG><a name="[b6]"></a>RingBufAdvanceRead</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIndexAtomic
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufUsed
</UL>

<P><STRONG><a name="[b7]"></a>RingBufAdvanceWrite</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufFree
</UL>

<P><STRONG><a name="[9b]"></a>RingBufWriteOne</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ringbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RingBufWriteOne
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateIndexAtomic
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_PrivateSendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GeneralIRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>RingBufWrite</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ringbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
</UL>

<P><STRONG><a name="[a3]"></a>RingBufInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
</UL>

<P><STRONG><a name="[5b]"></a>TIMER_SOFTWARE_ModX</STRONG> (Thumb, 568 bytes, Stack size 8 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_ModX
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>TIMER_SOFTWARE_request_timer</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_request_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>TIMER_SOFTWARE_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SOFTWARE_init &rArr; TIMER_SOFTWARE_request_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_request_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_init_system
</UL>

<P><STRONG><a name="[116]"></a>TIMER_SOFTWARE_release_timer</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, timer_software.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>TIMER_SOFTWARE_configure_timer</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>TIMER_SOFTWARE_enable_timer</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, timer_software.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
</UL>

<P><STRONG><a name="[117]"></a>TIMER_SOFTWARE_disable_timer</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer_software.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>TIMER_SOFTWARE_start_timer</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER_SOFTWARE_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_enable_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[a0]"></a>TIMER_SOFTWARE_stop_timer</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, timer_software.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_Wait
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
</UL>

<P><STRONG><a name="[118]"></a>TIMER_SOFTWARE_set_callback</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, timer_software.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>TIMER_SOFTWARE_Wait</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, timer_software.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_SOFTWARE_Wait &rArr; TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_stop_timer
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_start_timer
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_SOFTWARE_configure_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkInSqeuence
</UL>

<P><STRONG><a name="[64]"></a>TIMER_SOFTWARE_reset_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_software.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[68]"></a>TIMER_SOFTWARE_interrupt_pending</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_software.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandResponseValid
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommandResponse
</UL>

<P><STRONG><a name="[7a]"></a>TIMER_SOFTWARE_clear_interrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer_software.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_GENERAL_CalculateBaudrateDLD
</UL>

<P><STRONG><a name="[119]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_data
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parser_error
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TouchScreenCallBack
</UL>

<P><STRONG><a name="[bc]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bd]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[bb]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[41]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[bf]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[6c]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_data
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtractData
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Read
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GetErrno
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_PrivateSendByte
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GetCharBlocking
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendBufferBlocking
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendCharBlocking
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_GetTimeout
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SetTimeout
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_SendByte
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_ReadByte
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_Configure
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_UART_BytesAvailable
</UL>

<P><STRONG><a name="[11a]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommand
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_char_
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[44]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[46]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ba]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c3]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[c5]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[c4]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[c9]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ca]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[cb]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[4b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[48]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[cc]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[50]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ce]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[cd]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d2]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr;  DRV_UART_SendByte (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[d3]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[c0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[3a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_PERIOD
</UL>

<P><STRONG><a name="[d4]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_PERIOD
</UL>

<P><STRONG><a name="[d7]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_PERIOD
</UL>

<P><STRONG><a name="[11e]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d8]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[dd]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>

<P><STRONG><a name="[d9]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>

<P><STRONG><a name="[db]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>

<P><STRONG><a name="[11f]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_SDRAM_P2C
</UL>

<P><STRONG><a name="[dc]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[120]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)

<P><STRONG><a name="[da]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5]"></a>UpdateIndexAtomic</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ringbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufAdvanceRead
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufWriteOne
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingBufReadOne
</UL>

<P><STRONG><a name="[3b]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
